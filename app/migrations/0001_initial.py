# Generated by Django 5.1.5 on 2025-02-07 07:05

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DepartmentModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_dep', models.CharField(max_length=55, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Отделения',
                'verbose_name_plural': 'Отделения',
            },
        ),
        migrations.CreateModel(
            name='RoleModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_role', models.CharField(max_length=200, verbose_name='Название роли')),
            ],
            options={
                'verbose_name': 'Роль',
                'verbose_name_plural': 'Роль',
            },
        ),
        migrations.CreateModel(
            name='StatusModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название статуса')),
            ],
            options={
                'verbose_name': 'Статус',
                'verbose_name_plural': 'Статус',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('patronymic', models.CharField(max_length=250, verbose_name='Отчество')),
                ('gender', models.CharField(choices=[('m', 'Мужской'), ('j', 'Женский')], max_length=3, null=True, verbose_name='Пол')),
                ('birthday_date', models.DateField(null=True, verbose_name='Дата рождения')),
                ('date_end', models.DateField(null=True, verbose_name='Дата завершения зачисления')),
                ('signature', models.ImageField(null=True, upload_to='signatures/', verbose_name='Подпись пользователя')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('depart', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.departmentmodel', verbose_name='Отделение')),
                ('role', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.rolemodel', verbose_name='Роль')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='WorkaroundModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_create', models.TimeField(auto_now=True, verbose_name='Дата обновления')),
                ('pk_user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='Ключ пользователя')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.statusmodel', verbose_name='Статус')),
            ],
            options={
                'verbose_name': 'Обходной лист',
                'verbose_name_plural': 'Обходной лист',
            },
        ),
        migrations.CreateModel(
            name='WorkaroundSheetModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nameofpoint', models.CharField(max_length=50, verbose_name='Название пункта')),
                ('decription', models.TextField(verbose_name='Описание пункта')),
                ('date_of_create', models.TimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('date_of_update', models.TimeField(auto_now=True, verbose_name='Дата обновления пункта')),
                ('depart', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.departmentmodel', verbose_name='Отделение')),
            ],
            options={
                'verbose_name': 'Пункты обходного листа',
                'verbose_name_plural': 'Пункты обходного листа',
            },
        ),
        migrations.CreateModel(
            name='SignatureModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField(null=True, verbose_name='Комментарий')),
                ('pk_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Ключ пользователя')),
                ('wam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.workaroundmodel', verbose_name='Обходной лист')),
                ('wasm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.workaroundsheetmodel', verbose_name='Пункты обходного листа')),
            ],
            options={
                'verbose_name': 'Подписи',
                'verbose_name_plural': 'Подписи',
            },
        ),
    ]
